[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.0 (Ubuntu Java 11.0.9)
[debug] Load.defaultLoad until apply took 789.151111ms
[debug]           Load.loadUnit: plugins took 202.693144ms
[debug]           Load.loadUnit: defsScala took 0.336756ms
[debug] [Loading] Scanning directory /home/ante358/IdeaProjects/id2202-anwestm/solutions/cigrid/project
[debug]             Load.loadUnit: mkEval took 12.295294ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in /home/ante358/IdeaProjects/id2202-anwestm/solutions/cigrid/project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 40.744494 ms
[info] loading settings for project cigrid-build from plugins.sbt ...
[debug]               Load.resolveProject(cigrid-build) took 75.192922ms
[debug]             Load.loadTransitive: finalizeProject(Project(id cigrid-build, base: /home/ante358/IdeaProjects/id2202-anwestm/solutions/cigrid/project, plugins: List(<none>))) took 173.387226ms
[debug] [Loading] Done in /home/ante358/IdeaProjects/id2202-anwestm/solutions/cigrid/project, returning: (cigrid-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 638.223101ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.042566ms
[debug]         Load.loadUnit(file:/home/ante358/IdeaProjects/id2202-anwestm/solutions/cigrid/project/, ...) took 858.48343ms
[debug]       Load.apply: load took 1005.082207ms
[debug]       Load.apply: resolveProjects took 8.095071ms
[debug]       Load.apply: finalTransforms took 79.264452ms
[debug]       Load.apply: config.delegates took 11.669502ms
[debug]       Load.apply: Def.make(settings)... took 639.90681ms
[debug]       Load.apply: structureIndex took 151.779506ms
[debug]       Load.apply: mkStreams took 1.456323ms
[info] loading project definition from /home/ante358/IdeaProjects/id2202-anwestm/solutions/cigrid/project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 3341.522549ms
[debug]     Load.loadUnit: defsScala took 0.006056ms
[debug] [Loading] Scanning directory /home/ante358/IdeaProjects/id2202-anwestm/solutions/cigrid
[debug]       Load.loadUnit: mkEval took 0.284551ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in /home/ante358/IdeaProjects/id2202-anwestm/solutions/cigrid, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbtassembly.AssemblyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbtassembly.AssemblyPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbtassembly.AssemblyPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.714458 ms
[info] loading settings for project cigrid from build.sbt ...
[debug]         Load.resolveProject(cigrid) took 30.861716ms
[debug]       Load.loadTransitive: finalizeProject(Project(id cigrid, base: /home/ante358/IdeaProjects/id2202-anwestm/solutions/cigrid, plugins: List(<none>))) took 33.132288ms
[debug] [Loading] Done in /home/ante358/IdeaProjects/id2202-anwestm/solutions/cigrid, returning: (cigrid)
[debug]     Load.loadUnit: loadedProjectsRaw took 76.783562ms
[debug]     Load.loadUnit: cleanEvalClasses took 2.430658ms
[debug]   Load.loadUnit(file:/home/ante358/IdeaProjects/id2202-anwestm/solutions/cigrid/, ...) took 3422.094036ms
[debug] Load.apply: load took 3476.113439ms
[debug] Load.apply: resolveProjects took 0.108955ms
[debug] Load.apply: finalTransforms took 17.792514ms
[debug] Load.apply: config.delegates took 0.900261ms
[debug] Load.apply: Def.make(settings)... took 167.442596ms
[debug] Load.apply: structureIndex took 64.356544ms
[debug] Load.apply: mkStreams took 0.002428ms
[info] set current project to cigrid (in build file:/home/ante358/IdeaProjects/id2202-anwestm/solutions/cigrid/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(set assemblyJarName := "cigrid.jar", None, None)
[info] Defining assemblyJarName
[info] The new value will be used by assembly / assemblyJarName, assemblyPackageDependency / assemblyJarName, assemblyPackageScala / assemblyJarName
[debug] Defining 
[debug] 	assemblyJarName
[debug] 
[debug] The new value will be used by 
[debug] 	assembly / assemblyJarName
[debug] 	assemblyPackageDependency / assemblyJarName
[debug] 	assemblyPackageScala / assemblyJarName
[info] Reapplying settings...
[info] set current project to cigrid (in build file:/home/ante358/IdeaProjects/id2202-anwestm/solutions/cigrid/)
[debug] > Exec(set assemblyOutputPath in assembly := file("/cigrid.jar"), None, None)
[info] Defining assembly / assemblyOutputPath
[info] The new value will be used by assembly
[debug] Defining 
[debug] 	assembly / assemblyOutputPath
[debug] 
[debug] The new value will be used by 
[debug] 	assembly
[info] Reapplying settings...
[info] set current project to cigrid (in build file:/home/ante358/IdeaProjects/id2202-anwestm/solutions/cigrid/)
[debug] > Exec(assembly, None, None)
[debug] Evaluating tasks: assembly
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
